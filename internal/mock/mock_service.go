// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/with0p/gophermart/internal/service (interfaces: Service)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/with0p/gophermart/internal/models"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// AddOrder mocks base method.
func (m *MockService) AddOrder(arg0 context.Context, arg1 string, arg2 models.OrderID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddOrder", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddOrder indicates an expected call of AddOrder.
func (mr *MockServiceMockRecorder) AddOrder(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddOrder", reflect.TypeOf((*MockService)(nil).AddOrder), arg0, arg1, arg2)
}

// AuthenticateUser mocks base method.
func (m *MockService) AuthenticateUser(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthenticateUser", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// AuthenticateUser indicates an expected call of AuthenticateUser.
func (mr *MockServiceMockRecorder) AuthenticateUser(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthenticateUser", reflect.TypeOf((*MockService)(nil).AuthenticateUser), arg0, arg1, arg2)
}

// FeedQueue mocks base method.
func (m *MockService) FeedQueue(arg0 chan models.OrderID) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "FeedQueue", arg0)
}

// FeedQueue indicates an expected call of FeedQueue.
func (mr *MockServiceMockRecorder) FeedQueue(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FeedQueue", reflect.TypeOf((*MockService)(nil).FeedQueue), arg0)
}

// GetUserBalance mocks base method.
func (m *MockService) GetUserBalance(arg0 context.Context, arg1 string) (*models.Balance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserBalance", arg0, arg1)
	ret0, _ := ret[0].(*models.Balance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserBalance indicates an expected call of GetUserBalance.
func (mr *MockServiceMockRecorder) GetUserBalance(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserBalance", reflect.TypeOf((*MockService)(nil).GetUserBalance), arg0, arg1)
}

// GetUserOrders mocks base method.
func (m *MockService) GetUserOrders(arg0 context.Context, arg1 string) ([]models.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserOrders", arg0, arg1)
	ret0, _ := ret[0].([]models.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserOrders indicates an expected call of GetUserOrders.
func (mr *MockServiceMockRecorder) GetUserOrders(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserOrders", reflect.TypeOf((*MockService)(nil).GetUserOrders), arg0, arg1)
}

// GetUserWithdrawals mocks base method.
func (m *MockService) GetUserWithdrawals(arg0 context.Context, arg1 string) ([]models.Withdrawal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserWithdrawals", arg0, arg1)
	ret0, _ := ret[0].([]models.Withdrawal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserWithdrawals indicates an expected call of GetUserWithdrawals.
func (mr *MockServiceMockRecorder) GetUserWithdrawals(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserWithdrawals", reflect.TypeOf((*MockService)(nil).GetUserWithdrawals), arg0, arg1)
}

// MakeWithdrawal mocks base method.
func (m *MockService) MakeWithdrawal(arg0 context.Context, arg1 string, arg2 models.OrderID, arg3 float32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MakeWithdrawal", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// MakeWithdrawal indicates an expected call of MakeWithdrawal.
func (mr *MockServiceMockRecorder) MakeWithdrawal(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakeWithdrawal", reflect.TypeOf((*MockService)(nil).MakeWithdrawal), arg0, arg1, arg2, arg3)
}

// ProcessOrders mocks base method.
func (m *MockService) ProcessOrders(arg0 chan models.OrderID, arg1 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ProcessOrders", arg0, arg1)
}

// ProcessOrders indicates an expected call of ProcessOrders.
func (mr *MockServiceMockRecorder) ProcessOrders(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessOrders", reflect.TypeOf((*MockService)(nil).ProcessOrders), arg0, arg1)
}

// RegisterUser mocks base method.
func (m *MockService) RegisterUser(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterUser", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterUser indicates an expected call of RegisterUser.
func (mr *MockServiceMockRecorder) RegisterUser(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterUser", reflect.TypeOf((*MockService)(nil).RegisterUser), arg0, arg1, arg2)
}
